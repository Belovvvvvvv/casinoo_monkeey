from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from database.db import Database
from payment.crypto import CryptoPayment
from games.bowling import BowlingGame
from games.darts import DartsGame
from games.cube import CubeGame
from utils.logger import logger
import asyncio

class CommandHandlers:
    def __init__(self, bot: Bot, dp: Dispatcher, db: Database, crypto: CryptoPayment):
        self.bot = bot
        self.dp = dp
        self.db = db
        self.crypto = crypto
        self.bowling_game = BowlingGame(db, crypto)
        self.darts_game = DartsGame(db, crypto)
        self.cube_game = CubeGame(db, crypto)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.dp.message.register(self.cmd_start, Command("start"))
        self.dp.message.register(self.cmd_balance, Command("balance"))
        self.dp.message.register(self.cmd_upbalance, Command("upbalance"))
        self.dp.message.register(self.cmd_bowling, Command("bowling"))
        self.dp.message.register(self.cmd_darts, Command("darts"))
        self.dp.message.register(self.cmd_cube, Command("cube"))

    async def cmd_start(self, message: Message):
        user_id = message.from_user.id
        await self.db.create_user(user_id)
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ! üé∞\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã:\n"
            "üé≥ /bowling [—Å—Ç–∞–≤–∫–∞] - –ò–≥—Ä–∞ –≤ –±–æ—É–ª–∏–Ω–≥ (–º–∏–Ω. 10 –º–æ–Ω–µ—Ç, x3)\n"
            "üéØ /darts [—Å—Ç–∞–≤–∫–∞] - –ò–≥—Ä–∞ –≤ –¥–∞—Ä—Ç—Å (–º–∏–Ω. 5 –º–æ–Ω–µ—Ç, –≤—ã–∏–≥—Ä—ã—à 5 –º–æ–Ω–µ—Ç)\n"
            "üé≤ /cube [—Å—Ç–∞–≤–∫–∞] - –ò–≥—Ä–∞ –≤ –∫—É–±–∏–∫ (–º–∏–Ω. 1 –º–æ–Ω–µ—Ç–∞, x1.6)\n\n"
            "üí∞ /balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
            "üíµ /upbalance [—Å—É–º–º–∞] - –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"
        )

    async def cmd_balance(self, message: Message):
        user_id = message.from_user.id
        balance = await self.db.get_balance(user_id)
        await message.answer(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç")

    async def cmd_upbalance(self, message: Message):
        try:
            amount = float(message.text.split()[1])
            if amount < 1:
                await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 1 USDT")
                return
            
            invoice = await self.crypto.create_invoice(message.from_user.id, amount)
            if invoice:
                keyboard = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å",
                                url=invoice["bot_invoice_url"]
                            )
                        ]
                    ]
                )
                
                await message.answer(
                    f"–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount} USDT:\n\n"
                    f"–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å —Å—á–µ—Ç:\n"
                    f"`{invoice['bot_invoice_url']}`\n\n"
                    "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω.",
                    parse_mode="Markdown",
                    reply_markup=keyboard
                )

                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
                asyncio.create_task(self.check_payment_status(invoice["invoice_id"], message.from_user.id, amount))
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {amount} USDT")
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except (IndexError, ValueError):
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /upbalance [—Å—É–º–º–∞]\n–ü—Ä–∏–º–µ—Ä: /upbalance 10")

    async def check_payment_status(self, invoice_id: str, user_id: int, amount: float):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥"""
        while True:
            try:
                if await self.crypto.check_payment(invoice_id):
                    # –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å
                    await self.db.update_balance(user_id, amount)
                    await self.bot.send_message(
                        user_id,
                        f"‚úÖ –í–∞—à –±–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} –º–æ–Ω–µ—Ç!"
                    )
                    break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
            
            await asyncio.sleep(5)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥

    async def cmd_bowling(self, message: Message):
        await self.bowling_game.play(message)

    async def cmd_darts(self, message: Message):
        await self.darts_game.play(message)

    async def cmd_cube(self, message: Message):
        await self.cube_game.play(message) 