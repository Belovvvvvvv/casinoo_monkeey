import asyncio
from aiogram.types import Message
from games.base import BaseGame
from config import GAME_SETTINGS
from utils.logger import logger

class DartsGame(BaseGame):
    def __init__(self, db, crypto):
        super().__init__(db, crypto)
        self.settings = GAME_SETTINGS['darts']
        self.min_bet = 5
        self.win_amount = 5
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –≤ –¥–∞—Ä—Ç—Å")

    async def play(self, message):
        try:
            user_id = message.from_user.id

            bet = await self.get_bet(message, self.min_bet)
            if bet is None:
                return

            if not await self.check_balance(user_id, bet):
                await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")
                return

            darts_msg = await message.answer_dice(emoji="üéØ")
            await asyncio.sleep(4)

            score = darts_msg.dice.value

            if score == 6: 
                await self.process_win(user_id, bet, self.win_amount)
                await message.answer(f"üéØ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {self.win_amount} –º–æ–Ω–µ—Ç!")
            else:
                await self.process_loss(user_id, bet)
                await message.answer(f"üéØ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {bet} –º–æ–Ω–µ—Ç")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∏–≥—Ä–µ –¥–∞—Ä—Ç—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {str(e)}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def play_again(self, message):
        try:
            user_id = message.from_user.id
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –∏–≥—Ä—É –≤ –¥–∞—Ä—Ç—Å")
            
            bet = await self.get_bet(message, self.settings['min_bet'])
            if bet is None:
                return
            
            if not await self.check_balance(user_id, bet):
                logger.warning(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏ {bet}")
                await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")
                return
            
            await self.db.update_balance(user_id, -bet)
            
            darts_msg = await message.answer_dice(emoji="üéØ")
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—è –¥–∞—Ä—Ç—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            await asyncio.sleep(4)
            
            score = darts_msg.dice.value
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞ –¥–∞—Ä—Ç—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {score}")
            
            if self.settings['win_condition'](score):
                win_amount = self.settings['win_amount']
                await self.process_win(
                    message, user_id, bet, win_amount,
                    "üéØ", "–í—ã –ø–æ–ø–∞–ª–∏ –≤ —Ü–µ–Ω—Ç—Ä!"
                )
                logger.success(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–∏–≥—Ä–∞–ª –≤ –¥–∞—Ä—Ç—Å: {win_amount} –º–æ–Ω–µ—Ç")
                await message.answer(f"üéØ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ø–∞–ª–∏ –≤ —Ü–µ–Ω—Ç—Ä –∏ –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount} –º–æ–Ω–µ—Ç!")
            else:
                await self.process_loss(
                    message, "üéØ", f"–í—ã –ø–æ–ø–∞–ª–∏ –≤ {score}!", bet
                )
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ–∏–≥—Ä–∞–ª –≤ –¥–∞—Ä—Ç—Å: {bet} –º–æ–Ω–µ—Ç")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∏–≥—Ä–µ –¥–∞—Ä—Ç—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {str(e)}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.") 