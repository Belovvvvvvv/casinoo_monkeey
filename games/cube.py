import asyncio
from aiogram.types import Message
from games.base import BaseGame
from config import GAME_SETTINGS
from utils.logger import logger

class CubeGame(BaseGame):
    def __init__(self, db, crypto):
        super().__init__(db, crypto)
        self.min_bet = 1
        self.win_multiplier = 1.6

    async def play(self, message):
        try:
            user_id = message.from_user.id

            bet = await self.get_bet(message, self.min_bet)
            if bet is None:
                return

            if not await self.check_balance(user_id, bet):
                await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")
                return

            cube_msg = await message.answer_dice(emoji="üé≤")
            await asyncio.sleep(4)

            score = cube_msg.dice.value

            if score == 6: 
                win_amount = bet * self.win_multiplier
                await self.process_win(user_id, bet, win_amount)
                await message.answer(f"üé≤ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount} –º–æ–Ω–µ—Ç!")
            else:
                await self.process_loss(user_id, bet)
                await message.answer(f"üé≤ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {bet} –º–æ–Ω–µ—Ç")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∏–≥—Ä–µ –∫—É–±–∏–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {str(e)}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.") 